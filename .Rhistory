library(broom)
library(sandwich)
library(lubridate)
library(lmtest)
library(zoo)
setwd("~/Desktop/College/互联网与数字经济/赵宣凯老师/Economic news")
# 1. import data -------------------------------------------------------------
tidy_finance <- dbConnect(
SQLite(),
"/Users/desmondli/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/tidy_finance.sqlite",
extended_types = TRUE
)
data_nse <- dbConnect(
SQLite(),
"/Users/desmondli/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/data_nse.sqlite",
extended_types = TRUE
)
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") %>%
select(permno,date,month,ret,shrout,prc, vol, mktcap, mktcap_lag, ret_excess) %>%
collect()
#daily
crsp_daily <- tbl(tidy_finance, "crsp_daily") |>
collect()
crsp_daily=crsp_daily %>% left_join(crsp_monthly,join_by(permno,month==month))#添加行业分类
factors_ff3_daily <- tbl(tidy_finance, "factors_ff_daily") |>
collect()
ff3_monthly <- tbl(tidy_finance, "factors_ff_monthly") |>
collect()
crsp_daily <- crsp_daily |>
inner_join(factors_ff3_daily, by = "date") %>%
select(-rf) %>% arrange(date)
View(crsp_daily)
colnames(crsp_daily)
load("~/Desktop/College/互联网与数字经济/赵宣凯老师/Economic news/merged_crsp_daily.rdata")
View(crsp_daily)
colnames(crsp_daily)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RSQLite)
library(scales)
library(slider)
library(furrr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RSQLite)
library(scales)
library(lmtest)
library(broom)
library(sandwich)
tidy_finance <- dbConnect(
SQLite(),
"/Users/desmondli/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/tidy_finance_r.sqlite",
extended_types = TRUE
)
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") |>
select(permno, month, ret_excess, mktcap_lag) |>
collect()
tidy_finance <- dbConnect(
SQLite(),
"/Users/desmondli/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/tidy_finance.sqlite",
extended_types = TRUE
)
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") |>
select(permno, month, ret_excess, mktcap_lag) |>
collect()
factors_ff3_monthly <- tbl(tidy_finance, "factors_ff3_monthly") |>
select(month, mkt_excess) |>
collect()
tidy_finance <- dbConnect(
SQLite(),
"/Users/desmondli/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/tidy_finance.sqlite",
extended_types = TRUE
)
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") |>
select(permno, month, ret_excess, mktcap_lag) |>
collect()
factors_ff3_monthly <- tbl(tidy_finance, "factors_ff_monthly") |>
select(month, mkt_excess) |>
collect()
beta <- tbl(tidy_finance, "beta") |>
select(permno, month, beta_monthly) |>
collect()
beta_lag <- beta |>
mutate(month = month %m+% months(1)) |>
select(permno, month, beta_lag = beta_monthly) |>
drop_na()
data_for_sorts <- crsp_monthly |>
inner_join(beta_lag, join_by(permno, month))
beta_portfolios <- data_for_sorts |>
group_by(month) |>
mutate(
breakpoint = median(beta_lag),
portfolio = case_when(
beta_lag <= breakpoint ~ "low",
beta_lag > breakpoint ~ "high"
)
) |>
group_by(month, portfolio) |>
summarize(ret = weighted.mean(ret_excess, mktcap_lag),
.groups = "drop")
beta_longshort <- beta_portfolios |>
pivot_wider(id_cols = month, names_from = portfolio, values_from = ret) |>
mutate(long_short = high - low)
View(beta_longshort)
model_fit <- lm(long_short ~ 1, data = beta_longshort)
coeftest(model_fit, vcov = NeweyWest)
assign_portfolio <- function(data,
sorting_variable,
n_portfolios) {
# Compute breakpoints
breakpoints <- data |>
pull({{ sorting_variable }}) |>
quantile(
probs = seq(0, 1, length.out = n_portfolios + 1),
na.rm = TRUE,
names = FALSE
)
# Assign portfolios
assigned_portfolios <- data |>
mutate(portfolio = findInterval(
pick(everything()) |>
pull({{ sorting_variable }}),
breakpoints,
all.inside = TRUE
)) |>
pull(portfolio)
# Output
return(assigned_portfolios)
}
beta_portfolios <- data_for_sorts |>
group_by(month) |>
mutate(
portfolio = assign_portfolio(
data = pick(everything()),
sorting_variable = beta_lag,
n_portfolios = 10
),
portfolio = as.factor(portfolio)
) |>
group_by(portfolio, month) |>
summarize(
ret_excess = weighted.mean(ret_excess, mktcap_lag),
.groups = "drop"
)|>
left_join(factors_ff3_monthly, join_by(month))
beta_portfolios_summary <- beta_portfolios |>
nest(data = c(month, ret_excess, mkt_excess)) |>
mutate(estimates = map(
data, ~ tidy(lm(ret_excess ~ 1 + mkt_excess, data = .x))
)) |>
unnest(estimates) |>
select(portfolio, term, estimate) |>
pivot_wider(names_from = term, values_from = estimate) |>
rename(alpha = `(Intercept)`, beta = mkt_excess) |>
left_join(
beta_portfolios |>
group_by(portfolio) |>
summarize(ret_excess = mean(ret_excess),
.groups = "drop"), join_by(portfolio)
)
beta_portfolios_summary |>
ggplot(aes(x = portfolio, y = alpha, fill = portfolio)) +
geom_bar(stat = "identity") +
labs(
title = "CAPM alphas of beta-sorted portfolios",
x = "Portfolio",
y = "CAPM alpha",
fill = "Portfolio"
) +
scale_y_continuous(labels = percent) +
theme(legend.position = "None")
sml_capm <- lm(ret_excess ~ 1 + beta, data = beta_portfolios_summary)$coefficients
beta_portfolios_summary |>
ggplot(aes(
x = beta,
y = ret_excess,
color = portfolio
)) +
geom_point() +
geom_abline(
intercept = 0,
slope = mean(factors_ff3_monthly$mkt_excess),
linetype = "solid"
) +
geom_abline(
intercept = sml_capm[1],
slope = sml_capm[2],
linetype = "dashed"
) +
scale_y_continuous(
labels = percent,
limit = c(0, mean(factors_ff3_monthly$mkt_excess) * 2)
) +
scale_x_continuous(limits = c(0, 2)) +
labs(
x = "Beta", y = "Excess return", color = "Portfolio",
title = "Average portfolio excess returns and average beta estimates"
)
beta_longshort <- beta_portfolios |>
mutate(portfolio = case_when(
portfolio == max(as.numeric(portfolio)) ~ "high",
portfolio == min(as.numeric(portfolio)) ~ "low"
)) |>
filter(portfolio %in% c("low", "high")) |>
pivot_wider(id_cols = month,
names_from = portfolio,
values_from = ret_excess) |>
mutate(long_short = high - low) |>
left_join(factors_ff3_monthly, join_by(month))
coeftest(lm(long_short ~ 1, data = beta_longshort),
vcov = NeweyWest
)
coeftest(lm(long_short ~ 1 + mkt_excess, data = beta_longshort),
vcov = NeweyWest
)
beta_longshort |>
group_by(year = year(month)) |>
summarize(
low = prod(1 + low),
high = prod(1 + high),
long_short = prod(1 + long_short)
) |>
pivot_longer(cols = -year) |>
ggplot(aes(x = year, y = 1 - value, fill = name)) +
geom_col(position = "dodge") +
facet_wrap(~name, ncol = 1) +
theme(legend.position = "none") +
scale_y_continuous(labels = percent) +
labs(
title = "Annual returns of beta portfolios",
x = NULL, y = NULL
)
x=as.Date('2022-01-01')
x
x+days(1)
beta_portfolios <- data_for_sorts |>
group_by(month) |>
mutate(
breakpoint = median(beta_lag),
portfolio = case_when(
beta_lag <= breakpoint ~ "low",
beta_lag > breakpoint ~ "high"
)
) |>
group_by(month, portfolio) |>
summarize(ret = weighted.mean(ret_excess, mktcap_lag),
.groups = "drop")
beta_portfolios
beta_longshort <- beta_portfolios |>
pivot_wider(id_cols = month, names_from = portfolio, values_from = ret) |>
mutate(long_short = high - low)
beta_longshort
View(data_for_sorts)
assign_portfolio <- function(data,
sorting_variable,
n_portfolios) {
# Compute breakpoints
breakpoints <- data |>
pull(!!sym( sorting_variable) ) |>
quantile(
probs = seq(0, 1, length.out = n_portfolios + 1),
na.rm = TRUE,
names = FALSE
)
# Assign portfolios
assigned_portfolios <- data |>
mutate(portfolio = findInterval(
pick(everything()) |>
pull({{ sorting_variable }}),
breakpoints,
all.inside = TRUE
)) |>
pull(portfolio)
# Output
return(assigned_portfolios)
}
beta_portfolios <- data_for_sorts |>
group_by(month) |>
mutate(
portfolio = assign_portfolio(
data = pick(everything()),
sorting_variable = beta_lag,
n_portfolios = 10
),
portfolio = as.factor(portfolio)
) |>
group_by(portfolio, month) |>
summarize(
ret_excess = weighted.mean(ret_excess, mktcap_lag),
.groups = "drop"
)|>
left_join(factors_ff3_monthly, join_by(month))
beta_portfolios <- data_for_sorts |>
group_by(month) |>
mutate(
portfolio = assign_portfolio(
data = pick(everything()),
sorting_variable = 'beta_lag',
n_portfolios = 10
),
portfolio = as.factor(portfolio)
) |>
group_by(portfolio, month) |>
summarize(
ret_excess = weighted.mean(ret_excess, mktcap_lag),
.groups = "drop"
)|>
left_join(factors_ff3_monthly, join_by(month))
df <- tibble(
id = 1:5,
name = LETTERS[1:5],
age = c(21, 22, 23, 24, 25),
salary = c(50000, 52000, 55000, 58000, 60000)
)
df
df %>%
select(pick(name, age))
df %>%
mutate(pick(age) = age + 1)
df %>% mutate(pick(age) = age + 1)
View(beta_portfolios_summary)
?map
df_long <- tibble(
student_id = c(1, 1, 2, 2),
subject = c("Math", "Science", "Math", "Science"),
score = c(90, 85, 88, 92)
)
df_long
pivot_wider(df_long,
names_from = subject,
values_from = score)
?tidy
data <- tibble(
X = runif(100),  # 生成100个[0, 1)区间的随机数
Y = 2 * runif(100) + 0.5  # 生成Y值，基于X的线性关系加上随机噪声
)
data
model <- lm(Y ~ X, data = data)
tidy(model)
summary(model)
beta_portfolios_summary <- beta_portfolios |>
nest(data = c(month, ret_excess, mkt_excess)) |>
mutate(estimates = map(
data, ~ tidy(lm(ret_excess ~ 1 + mkt_excess, data = .x))
)) |>
unnest(estimates) |>
select(portfolio, term, estimate) |>
pivot_wider(names_from = term, values_from = estimate) |>
rename(alpha = `(Intercept)`, beta = mkt_excess) |>
left_join(
beta_portfolios |>
group_by(portfolio) |>
summarize(ret_excess = mean(ret_excess),
.groups = "drop"), join_by(portfolio)
)
beta_portfolios_summary
sml_capm <- lm(ret_excess ~ 1 + beta, data = beta_portfolios_summary)$coefficients
beta_portfolios_summary |>
ggplot(aes(
x = beta,
y = ret_excess,
color = portfolio
)) +
geom_point() +
geom_abline(
intercept = 0,
slope = mean(factors_ff3_monthly$mkt_excess),
linetype = "solid"
) +
geom_abline(
intercept = sml_capm[1],
slope = sml_capm[2],
linetype = "dashed"
) +
scale_y_continuous(
labels = percent,
limit = c(0, mean(factors_ff3_monthly$mkt_excess) * 2)
) +
scale_x_continuous(limits = c(0, 2)) +
labs(
x = "Beta", y = "Excess return", color = "Portfolio",
title = "Average portfolio excess returns and average beta estimates"
)
?case_when
7%%3
coeftest(lm(long_short ~ 1, data = beta_longshort),
vcov = NeweyWest
)
beta_longshort <- beta_portfolios |>
mutate(portfolio = case_when(
portfolio == max(as.numeric(portfolio)) ~ "high",
portfolio == min(as.numeric(portfolio)) ~ "low"
)) |>
filter(portfolio %in% c("low", "high")) |>
pivot_wider(id_cols = month,
names_from = portfolio,
values_from = ret_excess) |>
mutate(long_short = high - low) |>
left_join(factors_ff3_monthly, join_by(month))
coeftest(lm(long_short ~ 1, data = beta_longshort),
vcov = NeweyWest
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RSQLite)
library(scales)
library(slider)
library(furrr)
setwd("~/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/rmarkdown")
tidy_finance <- dbConnect(
SQLite(),
"/Users/desmondli/Desktop/College/互联网与数字经济/赵宣凯老师/tidy finance/tidy_finance.sqlite",
extended_types = TRUE
)
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") |>
select(permno, month, industry, ret_excess) |>
collect()
factors_ff3_monthly <- tbl(tidy_finance, "factors_ff_monthly") |>
select(month, mkt_excess) |>
collect()
crsp_monthly <- crsp_monthly |>
left_join(factors_ff3_monthly, join_by(month))
fit <- lm(ret_excess ~ mkt_excess,
data = crsp_monthly |>
filter(permno == "14593")
)
summary(fit)
estimate_capm <- function(data, min_obs = 1) {
if (nrow(data) < min_obs) {
beta <- as.numeric(NA)
} else {
fit <- lm(ret_excess ~ mkt_excess, data = data)
beta <- as.numeric(coefficients(fit)[2])
}
return(beta)
}
roll_capm_estimation <- function(data, months, min_obs) {
data <- data |>
arrange(month)
betas <- slide_period_vec(
.x = data,
.i = data$month,
.period = "month",
.f = ~ estimate_capm(., min_obs),
.before = months - 1,
.complete = FALSE
)
return(tibble(
month = unique(data$month),
beta = betas
))
}
examples <- tribble(
~permno, ~company,
14593, "Apple",
10107, "Microsoft",
93436, "Tesla",
17778, "Berkshire Hathaway"
)
beta_example <- crsp_monthly |>
filter(permno == examples$permno[1]) |>
mutate(roll_capm_estimation(pick(everything()), months = 60, min_obs = 48)) |>
drop_na()
beta_example
beta_examples <- crsp_monthly |>
inner_join(examples, join_by(permno)) |>
group_by(permno) |>
mutate(roll_capm_estimation(pick(everything()), months = 60, min_obs = 48)) |>
ungroup() |>
select(permno, company, month, beta) |>
drop_na()
beta_examples |>
ggplot(aes(
x = month,
y = beta,
color = company,
linetype = company)) +
geom_line() +
labs(
x = NULL, y = NULL, color = NULL, linetype = NULL,
title = "Fig1: Monthly beta estimates for example stocks using 5 years of data"
)
crsp_monthly_nested <- crsp_monthly |>
nest(data = c(month, ret_excess, mkt_excess))
crsp_monthly_nested
crsp_monthly_nested <- crsp_monthly |>
nest(data = -c(permno, industry))
crsp_monthly_nested |>
inner_join(examples, join_by(permno)) |>
mutate(beta = map(
data,
~ roll_capm_estimation(., months = 60, min_obs = 48)
)) |>
unnest(beta) |>
select(permno, month, beta_monthly = beta) |>
drop_na()
n_cores = availableCores()/2
plan(multisession, workers = n_cores)
beta_monthly <- crsp_monthly_nested |>
mutate(beta = future_map(
data, ~ roll_capm_estimation(., months = 60, min_obs = 48)
)) |>
unnest(c(beta)) |>
select(permno, month, beta_monthly = beta) |>
drop_na()
beta_monthly <- crsp_monthly_nested |>
mutate(beta = future_map(
data, ~ roll_capm_estimation(., months = 60, min_obs = 48)
)) |>
unnest(c(beta)) |>
select(permno, month, beta_monthly = beta) |>
drop_na()
